n<-100
N<-2*n
#Create Covariates
#Gender
Male <- rbinom(N, 1, .5) #just have genders be 50/50 for now
#Age
AgeDiff <- runif(1, -10, 10)#size of age difference between trial and target pops
AgeTrial <- rpois(n, 50+AgeDiff*.5) #create vector of trial ages (integers, centered at 1/2 dist away from 50)
AgeTarget <- rpois(n, 50-AgeDiff*.5)
Age <- c(AgeTrial, AgeTarget) #vector with n trial then n target ages
#Race
RaceTrial <-sample(c("Black", "White", "Asian", "Hispanic", "Other"), n, replace=TRUE, prob=c(0.1, 0.5, .2, .15, .05))
RaceTarget <-sample(c("Black", "White", "Asian", "Hispanic", "Other"), n, replace=TRUE, prob=c(0.2, 0.4, .1, .25, .05))
Race <- c(RaceTrial, RaceTarget)
#BMI
#make this some function like: h(age, gender)+random term
#for now, just make normal
BMI<-rnorm(N, 24, 5)
#mispecified variable
Udiff<- 0
#runif(1, -1, 1)#size of underlying var difference between trial and target pops - I want this because there should be 2 differences in the population
#a) different levels of the underlying variable itself and b) differential coding
UTarget<- rnorm(n, 5+Udiff*.5, 1)
UTrial<- rnorm(n, 5-Udiff*.5, 1)
#cutoffs - find way to calculate these
c1<-5
c2<-4.5
VTrial <- ifelse(UTarget<c1, "Low", "High")
VTarget <- ifelse(UTarget<c2, "Low", "High")
V <- c(VTrial, VTarget)
V
head(V)
# Create other variables
ATrial<-rbinom(n, 1, .5)
A <- c(ATrial, rep(NA, n)) #1 if treat, 0 if control (only for those in trial!)
S <- c(rep(1,n), rep(0,n))#indicator variable for trial
Y0 <- 3*Male -.2*Age + 4*BMI+as.numeric(V=="High")*3+as.numeric(Race=="Black")*2 +rnorm(N, 100,sd=50)
Y1 <- 3*Male -.2*Age + 4*BMI+as.numeric(V=="High")*3+as.numeric(Race=="Black")*2 +rnorm(N, 100,sd=50) +30
Y  <- ifelse(A==1, Y1,Y0)
data <- data.frame(Male, Age, Race, BMI, V, A, S, Y0, Y1, Y)
head(data)
a=c(1,1)
b=c(1,1)
a%*%b
b=c(-1,-1)
a%*%b
a
b
a=matrix(c(1,1), ncol = 1)
a
b=matrix(c(1,1), ncol = 1)
a%*%b
t(a)%*%b
t(a) %*% b
t(a) %*% b / (norm(a, type = "2") * norm(b, type = "2"))
cos(1)
a=matrix(c(-1,-1), ncol = 1)
t(a) %*% b / (norm(a, type = "2") * norm(b, type = "2"))
set.seed(1)
# Differentially Specified Variable
p <- 0.5
l <- 0.5
k <- 0.05
set.seed(1)
a_Target <- rbinom(1, 1, prob = p)
a_Target
p <- 0.5
l <- 0.5
k <- 0.05
set.seed(1)
Target_cut_less <- rbinom(1, 1, prob = p) # Binary indicator for Target cut point less than Trial cut point
Target_cut_less
a <- l - k/2
a
b <- l + k/2
b
## -- Differentially Specified Variable
p <- 0.5
l <- 0.5
k <- 0.05
Udiff<- 0 # Difference in the latent variable means
# Generate Latent Variable
UTarget<- rnorm(n, 0 + Udiff, 1)
# Set parameters
seed <- 1
p <- 0.5
l <- 0.5
k <- 0.05
Udiff<- 0 # Difference in the latent variable means
# Generate Latent Variable
UTarget<- rnorm(n, 0 + Udiff, 1)
# Generate Latent Variable
set.seed(seed)
UTarget<- rnorm(n, 0 + Udiff, 1)
n<-100
UTarget<- rnorm(n, 0 + Udiff, 1)
UTrial<- rnorm(n, 0 - Udiff, 1)
UTarget
UTrial
a
b
?qnorm
# Set parameters
seed <- 1
p <- 0.5
l <- 0.5
k <- 0.05
# Generate Latent Variable
set.seed(seed)
UTarget<- rnorm(n)
UTrial<- rnorm(n)
UTarget
?rbinom
seed <- 1
p <- 0.5
l <- 0.5
k <- 0.05
# Generate Latent Variable
set.seed(seed)
UTarget<- rnorm(n) # TODO do we want Udiff as an option? If so, we'll need to determine ordering.
UTrial<- rnorm(n)
# Cut Latent Variable
Target_cut_less <- rbinom(1, 1, prob = p) # Binary indicator for Target cut point less than Trial cut point
a <- l - k/2
b <- l + k/2
a_norm <- qnorm(a)
a_norm
a_thresh <- qnorm(a)
b_thresh <- qnorm(b)
b_thresh
Target_cut_less
# Set parameters
seed <- 1
p <- 0.5
l <- 0.5
k <- 0.05
# Generate Latent Variable
set.seed(seed)
UTrial<- rnorm(n)
UTarget<- rnorm(n) # TODO do we want Udiff as an option? If so, we'll need to determine ordering.
# Cut Latent Variable
Trial_cut_less <- rbinom(1, 1, prob = p) # Binary indicator for Target cut point less than Trial cut point
a <- l - k/2
b <- l + k/2
a_thresh <- qnorm(a)
b_thresh <- qnorm(b)
sample_V <- function(n=100, k=0.05, l=0.5, p=0.5, seed=1) {
# Generate Latent Variable
set.seed(seed)
UTrial<- rnorm(n)
UTarget<- rnorm(n) # TODO are we fine with standard normal latent variables? Any normal variable can be centered and scaled...
# Cut Latent Variable
Trial_cut_less <- rbinom(1, 1, prob = p) # Binary indicator for Trial cut point less than Target cut point
a <- l - k/2
b <- l + k/2
a_thresh <- qnorm(a)
b_thresh <- qnorm(b)
if (Trial_cut_less==1) {
VTrial <- ifelse(UTrial < a_thresh, "Low", "High")
VTarget <- ifelse(UTarget < b_thresh, "Low", "High")
} else {
VTrial <- ifelse(UTrial < b_thresh, "Low", "High")
VTarget <- ifelse(UTarget < a_thresh, "Low", "High")
}
V <- c(VTrial, VTarget)
return(V)
}
sample_V()
sample_V <- function(n=100, k=0.05, l=0.5, p=0.5, seed=1) {
# Generate Latent Variable
set.seed(seed)
UTrial<- rnorm(n)
UTarget<- rnorm(n) # TODO are we fine with standard normal latent variables? Any normal variable can be centered and scaled...
# Cut Latent Variable
Trial_cut_less <- rbinom(1, 1, prob = p) # Binary indicator for Trial cut point less than Target cut point
a <- l - k/2
b <- l + k/2
a_thresh <- qnorm(a)
b_thresh <- qnorm(b)
if (Trial_cut_less==1) {
VTrial <- ifelse(UTrial < a_thresh, "Low", "High")
VTarget <- ifelse(UTarget < b_thresh, "Low", "High")
} else {
VTrial <- ifelse(UTrial < b_thresh, "Low", "High")
VTarget <- ifelse(UTarget < a_thresh, "Low", "High")
}
V_df <- data.frame(population = c(rep("Trial", n), rep("Target", n)),
V = c(VTrial, VTarget))
return(V_df)
}
sample_V
sample_V()
sample_V() %>% str()
library(tidyverse)
sample_V() %>% str()
sample_V <- function(n=100, k=0.05, l=0.5, p=0.5, seed=1) {
# Generate Latent Variable
set.seed(seed)
UTrial<- rnorm(n)
UTarget<- rnorm(n) # TODO are we fine with standard normal latent variables? Any normal variable can be centered and scaled...
# Cut Latent Variable
Trial_cut_less <- rbinom(1, 1, prob = p) # Binary indicator for Trial cut point less than Target cut point
a <- l - k/2
b <- l + k/2
a_thresh <- qnorm(a)
b_thresh <- qnorm(b)
if (Trial_cut_less==1) {
VTrial <- ifelse(UTrial < a_thresh, "Low", "High")
VTarget <- ifelse(UTarget < b_thresh, "Low", "High")
} else {
VTrial <- ifelse(UTrial < b_thresh, "Low", "High")
VTarget <- ifelse(UTarget < a_thresh, "Low", "High")
}
V_df <- data.frame(population = factor(c(rep("Trial", n), rep("Target", n))),
V = factor(c(VTrial, VTarget)))
return(V_df)
}
sample_V()
sample_V() %>% str()
?factor
V = factor(c(VTrial, VTarget), levels = "Low", "High")
# Generate Latent Variable
set.seed(seed)
UTrial<- rnorm(n)
UTarget<- rnorm(n) # TODO are we fine with standard normal latent variables? Any normal variable can be centered and scaled...
# Cut Latent Variable
Trial_cut_less <- rbinom(1, 1, prob = p) # Binary indicator for Trial cut point less than Target cut point
a <- l - k/2
b <- l + k/2
a_thresh <- qnorm(a)
b_thresh <- qnorm(b)
if (Trial_cut_less==1) {
VTrial <- ifelse(UTrial < a_thresh, "Low", "High")
VTarget <- ifelse(UTarget < b_thresh, "Low", "High")
} else {
VTrial <- ifelse(UTrial < b_thresh, "Low", "High")
VTarget <- ifelse(UTarget < a_thresh, "Low", "High")
}
V = factor(c(VTrial, VTarget), levels = "Low", "High")
V
V = factor(c(VTrial, VTarget), levels = c("Low", "High"))
V
sample_V <- function(n=100, k=0.05, l=0.5, p=0.5, seed=1) {
# Generate Latent Variable
set.seed(seed)
UTrial<- rnorm(n)
UTarget<- rnorm(n) # TODO are we fine with standard normal latent variables? Any normal variable can be centered and scaled...
# Cut Latent Variable
Trial_cut_less <- rbinom(1, 1, prob = p) # Binary indicator for Trial cut point less than Target cut point
a <- l - k/2
b <- l + k/2
a_thresh <- qnorm(a)
b_thresh <- qnorm(b)
if (Trial_cut_less==1) {
VTrial <- ifelse(UTrial < a_thresh, "Low", "High")
VTarget <- ifelse(UTarget < b_thresh, "Low", "High")
} else {
VTrial <- ifelse(UTrial < b_thresh, "Low", "High")
VTarget <- ifelse(UTarget < a_thresh, "Low", "High")
}
V = factor(c(VTrial, VTarget), levels = c("Low", "High"))
V_df <- data.frame(population = factor(c(rep("Trial", n), rep("Target", n))), V)
return(V_df)
}
sample_V()
sample_V() %>% str()
